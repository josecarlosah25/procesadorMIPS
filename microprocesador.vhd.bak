library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_UNSIGNED.all;

entity microprocesador is
port(
	clk,reset,cs: in std_logic;
	Asal7seg,Bsal7seg,Csal7seg_1,Csal7seg_0: out std_logic_vector(6 downto 0)
	op: out std_logic_vector(3 downto 0));
	); --que operacion es Sum Rest, And, OR Xor
end microprocesador;

architecture behavior of decoder is

signal bus_instruc: std_logic_vector(15 downto 0);
signal bus_datosA,bus_datosB: std_logic_vector (2 downto 0);
signal s:  std_logic_vector(1 downto 0);
signal s2,cin:  std_logic;
signal cout: std_logic;
signal numC :std_logic_vector(2 downto 0);

BEGIN


Fetch: entity work.fetch(behavior) port map (clk,reset,cs,bus_instruc);
Decoder: entity work.decoder(behavior) port map (bus_instruc,bus_datosA,bus_datosB,s,s2,cin,cs);
Alu: entity work.alu(arq) port map(bus_datosA,bus_datosB,cin,s2 & s,cout,Csal7seg_1,Csal7seg_0);
op<=cin&s2&s; 
numA: entity work.bcd7seg(arq) port map(bus_datosA,Asal7seg);
numB: entity work.bcd7seg(arq) port map(bus_datosB,Bsal7seg);

end architecture behavior;